Змейка(1)

А теперь напишем игру "змейка".

Для этого нам понадобятся:
а) собственно сама змея (класс Snake)
б) комната, в которой она будет ползать (класс Room)
в) мыши, которых она будет есть (класс Mouse)

Создай классы Snake, Room, Mouse

Не забудь создать метод public static void main(String[] args) в классе Room.

Требования:
1. Класс Snake должен быть создан в отдельном файле.
2. Класс Room должен быть создан в отдельном файле.
3. Класс Mouse должен быть создан в отдельном файле.
4. Класс Room должен содержать корректно объявленный метод main.

Змейка(2)

Теперь самое интересное - как будет устроена змея.

Что можно сказать о змее:
а) По сути - змея это набор кусочков - клеточек. Но точно известно, что один из них - голова.
б) У змеи есть направление движения.

Так что нам еще понадобятся классы:
SnakeSection - кусочек змеи.
SnakeDirection - класс (enum) будет описывать направление движения змеи.

Создай классы SnakeSection и SnakeDirection.

Требования:
1. Класс SnakeSection должен быть создан в отдельном файле.
2. Перечисление(enum) SnakeDirection должно быть создано в отдельном файле.

Змейка(3)

Отлично. Я еще добавил класс KeyboardObserver на будущее.
Изучи его внимательно. Пригодится.

Начнем с самого простого - класса Mouse.
Мышь не будет двигаться и у нее будут только координаты и все.
Добавь два приватных поля в класс Mouse: x и y типа int.

Требования:
1. Внимательно изучи класс KeyboardObserver.
2. В классе Mouse должно существовать поле x типа int, доступ к которому разрешен только в пределах этого класса.
3. В классе Mouse должно существовать поле y типа int, доступ к которому разрешен только в пределах этого класса.

Змейка(4)

Координаты x и y ты уже создал в классе Mouse, а как получить к ним доступ?
Создай корректные геттеры для этих полей и конструктор с двумя параметрами типа int (x и y соответственно).

Требования:
1. В классе Mouse должен быть создан корректный геттер для поля x.
2. В классе Mouse должен быть создан корректный геттер для поля y.
3. В классе Mouse должен быть создан корректно работающий публичный конструктор с двумя параметрами типа int.

Змейка(5)

Теперь доделаем enum SnakeDirection так, чтобы он содержал возможные направления движения змейки.

Добавь 4 значения UP, DOWN, LEFT, RIGHT.

Должно получиться примерно так:
public enum SnakeDirection
{
 UP,
 RIGHT,
 DOWN,
 LEFT
}

Требования:
1. SnakeDirection должен содержать элемент UP.
2. SnakeDirection должен содержать элемент DOWN.
3. SnakeDirection должен содержать элемент RIGHT.
4. SnakeDirection должен содержать элемент LEFT.

Змейка(6)

Теперь займемся классом SnakeSection.
Он будет описывать один кусочек змеи.

А у каждого кусочка что есть?
Правильно! Координаты.

Добавь два поля в класс SnakeSection: x и y типа int.
Добавь для них getter'ы и конструктор с двумя параметрами типа int.

Требования:
1. В классе SnakeSection должно существовать поле x типа int, доступ к которому разрешен только в пределах этого класса.
2. В классе SnakeSection должно существовать поле y типа int, доступ к которому разрешен только в пределах этого класса.
3. В классе SnakeSection должен быть создан корректный геттер для поля x.
4. В классе SnakeSection должен быть создан корректный геттер для поля y.
5. В классе SnakeSection должен быть создан корректно работающий публичный конструктор с двумя параметрами типа int.

Змейка(7)

"Кусочки змеи" мы описали, теперь займемся самой змеей.

У змеи должен быть список кусочков(SnakeSection) и голова.
Пусть головой будет просто самый первый кусочек (с номером 0).

У змеи также есть направление движения - сторона, куда она движется по умолчанию.
А еще есть состояние - жива змея или мертва.
Игра заканчивается тогда, когда змея мертва.

Надо:
а) Добавить в класс Snake поле sections типа List<SnakeSection>.
б) Добавить поле isAlive типа boolean.
в) Добавить поле direction типа SnakeDirection.
г) Для всех полей добавить getter'ы, а для direction еще и setter.

Примечание:
Для полей логического типа геттер принято писать не как getValue(), а как isValue() - это улучшает читабельность кода.
Только не пиши isIsAlive(). Одного is будет вполне достаточно.

Примечание 2:
Все поля создаваемые в этом задании должны быть приватными, а методы - публичными.

Требования:
1. В классе Snake должно быть объявлено поле sections типа List.
2. В классе Snake должно быть объявлено поле isAlive типа boolean.
3. В классе Snake должно быть объявлено поле direction типа SnakeDirection.
4. В классе Snake должен быть создан корректный геттер для поля sections.
5. В классе Snake должен быть создан корректный геттер для поля isAlive.
6. В классе Snake должен быть создан корректный геттер для поля direction.
7. В классе Snake должен быть создан корректный сеттер для поля direction.
8. Все поля класса Snake должны быть объявлены с модификатором доступа private.
9. Все методы класса Snake должны быть объявлены с модификатором доступа public.

Змейка(8)

Настала очередь конструктора класса Snake.

Змея у нас будет поначалу состоять из одного кусочка - головы.
А что для него требуется?
Что необходимо передать в конструктор?
Координаты змеи, конечно же.

Надо:
а) Передать в конструктор координаты головы змеи (x и y).
б) создать в нем первый "кусочек змеи" (голову) и добавить его в коллекцию sections (ArrayList).
в) isAlive выставить в true.
г) не забудь в конструкторе инициализировать переменную sections. В null не много-то и добавишь!
д) создать и реализовать метод int getX(). Метод должен вернуть координату Х головы змеи.
е) создать и реализовать метод int getY(). Метод должен вернуть координату Y головы змеи.
ж) еще добавить классу метод move()- он нам пригодится попозже.
з) созданный конструктор должен быть публичным.

Требования:
1. В классе Snake должен быть создан корректно работающий public конструктор (согласно условию задачи) с двумя параметрами типа int.
2. В классе Snake должен быть создан метод getX() без параметров, возвращающий координату x нулевого элемента списка sections.
3. В классе Snake должен быть создан метод getY() без параметров, возвращающий координату y нулевого элемента списка sections.
4. В классе Snake должен быть создан метод move.

Змейка(9)

Еще остался самый главный класс - Room.
Что нам нужно для его описания?
Размеры комнаты (width и height) - раз.
Змея - два
Мышь - три.

Надо:
а) создать в классе Room переменные width и height типа int.
б) создать в классе Room переменную snake типа Snake.
в) создать в классе Room переменную mouse типа Snake. Шучу. Типа Mouse, конечно же :).
г) создать для них всех геттеры и сеттеры.
д) создать конструктор. Конструктор должен принимать три параметра: width, height и ... snake!

Требования:
1. В классе Room должна быть создана приватная переменная width типа int.
2. В классе Room должна быть создана приватная переменная height типа int.
3. В классе Room должна быть создана приватная переменная snake типа Snake.
4. В классе Room должна быть создана приватная переменная mouse типа Mouse.
5. В классе Room должен быть создан корректный публичный геттер для поля width.
6. В классе Room должен быть создан корректный публичный геттер для поля height.
7. В классе Room должен быть создан корректный публичный геттер для поля snake.
8. В классе Room должен быть создан корректный публичный геттер для поля mouse.
9. В классе Room должен быть создан корректный публичный сеттер для поля width.
10. В классе Room должен быть создан корректный публичный сеттер для поля height.
11. В классе Room должен быть создан корректный публичный сеттер для поля snake.
12. В классе Room должен быть создан корректный публичный сеттер для поля mouse.
13. В классе Room должен быть создан корректный публичный конструктор с параметрами int, int и Snake(width, height и snake).

Змейка(11)

Теперь логика управления мышью.

С мышью у нас будут происходить две вещи.

Первая - змея съедает мышь.

Вторая - появляется новая мышь в случайной точке комнаты.

Надо написать и реализовать метод createMouse() в классе Room.

В этом методе мы просто должны создавать новую мышь со случайными координатами в комнате.

Как получить случайные координаты?

Это ты уже должен был знать. На всякий случай даю подсказку:

int x = (int) (Math.random() * width);

Еще понадобится метод - eatMouse(), на случай, если мышь все-таки кто-то съест :)

Пока сложной логики в этом методе не будет - просто будем вызывать метод createMouse и все.

Требования:
1. В классе Room должен быть создан метод createMouse.
2. В методе createMouse должна быть создана новая мышь по правилам описанным в условии и сохранена в поле mouse.
3. В классе Room должен быть создан метод eatMouse.
4. В методе eatMouse должен содержаться вызов метода createMouse.

Змейка(12)

Змея у нас есть, пусть и мышь будет.

Добавить в метод main:
a) вызов метода createMouse().
б) вызов метода run().
Без него ничего работать не будет. В нем вся основная логика.
Неплохо получилось, но я все-таки внесу пару правок.
Кстати, как насчет написать метод sleep?
Ты уже понял из предыдущих задач, что в методе run нужна пауза.
Но насколько я помню, скорость в змейке должна расти при росте ее длины.
Значит чем длиннее змея, тем выше скорость и меньше пауза.

Требования:
1. В методе main классе Room должен быть вызван метод createMouse на объекте типа Room.
2. В методе main классе Room должен быть вызван метод run на объекте типа Room.
3. В классе Room должен быть создан метод sleep без параметров.

Змейка(13)

Предлагаю тебе в этот раз написать специальный метод sleep(), который будет делать паузу в зависимости от длины змеи (количества элементов в sections).
Придумай какой-нибудь хитрый алгоритм. Чтобы на первом уровне пауза была 500 миллисекунд,
к 11 уровню постепенно уменьшилась до 300. А к 15 до 200. И дальше оставалась постоянной.

Требования:
1. Метод sleep должен вызывать метод Thread.sleep(500) в начале игры.
2. Метод sleep должен вызывать метод Thread.sleep(300) на 11 уровне.
3. Метод sleep должен вызывать метод Thread.sleep(200) для уровней больше 15.

Змейка(14)

Теперь поработаем над методом print().

Надо:
а) вывести на экран прямоугольник из точек размером width x height.
б) тело змеи отметить символом "x"-английское
в) голову змеи нарисовать символом "X"-английское.

Подсказка:
а) удобно сначала создать матрицу типа int[][] с размером (height x width)
б) затем пройтись по всем объектам и отрисовать их в матрицу.
Например, тело змеи - 1, голова змеи - 2, мышь - 3.

Требования:
1. Метод print должен выводить данные на экран.
2. Метод print должен выводить на экран количество строк равное height.
3. Количество символов в каждой строке выведенной на экран должно быть равно width.
4. Голова змеи должна быть отмечена символом X.
5. Тело змеи должно быть отмечено символами x.
6. Мышь должна быть отмечена символом ^.